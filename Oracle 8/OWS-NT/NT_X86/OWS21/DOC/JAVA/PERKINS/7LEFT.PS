<<<NOTE to Editor/Production:  you can let the below text start below the last diagram (6Right.ps) and flow onto the last page of the appendix (7Left) or if it looks better, simple put the text all on the last page by itself.  The .ps files are numbered with the title page being numbered 0, and its back named 1Left.ps, then 1Right.ps, etc. up to 7Left (the text page), with the page that would have been named 7Right beginning the next Appendix.  Layout "landscape" .ps files with their "bottom" facing right.  When you test-print the diagrams, the boxes should be filled with white, 15% gray, and 40% gray, and the drop shadows with 67% gray.  If the 40% gray is too dark to read the black text within, and you're able to do it, lower the % gray a bit (but don't go below 35% or so since I want the darker gray to easily contrast with the lighter gray, and to be obvious even without it nearby to contrast (i.e., on the pages that have only white and dark gray boxes)).  Call me with questions (see phone number at end).>>>


(a) Appendix XXX
(b) Class Hierarchy Diagrams

by
Charles L. Perkins


These are class hierarchy diagrams for the package java and for all the sub-packages recursively below it in the Java 1.0 binary release.

Each page contains the class hierarchy for one package (or a subtree of a particularly large package) with all its interfaces included, and each class in this tree is shown attached to its superclasses, even if they are on another page.  A detailed key is located on the first page of this appendix.

I supplemented the (incomplete) on-line API documentation by looking through all the source files (below src/java) to find all the (missing) package classes and their relationships.

I've heard there are various programs that auto-layout hierarchies for you, but I did these "the old-fashioned way" (in other words, I earned it, as J.H. used to say).  One nice side-effect is that these diagrams should be more readable than a computer would produce, though you will have to live with my aesthetic choices (sorry).  I chose, for example, to attach lines through the center of each class node, something which I think looks and feels better overall (to me) but which on occasion can be a little confusing.  Follow lines through the center of the classes (not at the corners, nor along any line not passing through the center) to mentally connect the dots.


(b) Bio.

Charles L. Perkins is the founder of Virtual Rendezvous, a company building what it spent two years designing:  a software service above Java that will foster socially-focused, computer-mediated, real-time filtered interactions between people's personas in the virtual environments of the near future.  In previous lives, he has evangelized NeXTSTEP, Smalltalk, and UNIX, and has degrees in both physics and computer science.  He's done research in speech recognition, neural nets, gestural user interfaces, computer graphics, and language theory, but had the most fun working at Thinking Machines and Xerox PARC's Smalltalk group.  In his spare time, he reads textbooks for fun.

You can reach him via E-mail at virtual@rendezvous.com, or visit his Java page at http://rendezvous.com/java.


<<<NOTE to Editor:  if you need to change ANYTHING ABOUT the text in the above two sections, even something trivial, please call me and read me the changes.  Thanks!  [(617) 547-1917, after noon, any day.]>>>
