------- Generated by SYS.DBMS_METADATA on 28-jan-2010 at 14:19:06 -------

  CREATE OR REPLACE PACKAGE "RM"."PKG_RELACAO" IS
/**  
 ---------------------------------------------------------------
| Purpose: Get parents and children's relation through by field |
| Created by Junio Freitas                                      |
| Date: 09.10.2010                                              |
 ---------------------------------------------------------------
**/

   -- RECORD TYPE OF MAIN CURSOR 
   TYPE TREG IS RECORD (
      P user_constraints.TABLE_NAME%TYPE, -- Parent table
      CP user_cons_columns.COLUMN_NAME%TYPE, -- Parent Field
      F user_constraints.TABLE_NAME%TYPE, -- Child table
      CF user_cons_columns.COLUMN_NAME%TYPE, -- Child Field
      LEV INTEGER      
   );
       
   -- COLLECTION TYPE FROM MAIN CURSOR
   TYPE TRELATION IS TABLE OF TREG;
   
   -- CALC CHILDREN FROM A TABLE 
   PROCEDURE CALC_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0, REL IN OUT TRELATION);

   -- GET COLLECTION CHILDREN FROM A TABLE
   FUNCTION GET_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0) RETURN TRELATION;
   
   -- GET REPORT FROM CHILDREN
   PROCEDURE LIST_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0); 
   
   
END; -- Package
CREATE OR REPLACE PACKAGE BODY "RM"."PKG_RELACAO" IS
/**  
 ---------------------------------------------------------------
| Purpose: Get parents and children's relation through by field |
| Created by Junio Freitas                                      |
| Date: 09.10.2010                                              |
 ---------------------------------------------------------------
**/   

   -- CALC CHILDREN FROM A TABLE 
   PROCEDURE CALC_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0, REL IN OUT TRELATION) IS
      -- Cursor that to return the children of table through the specific constraint parameter
      CURSOR RELATION(PTABLE user_constraints.TABLE_NAME%TYPE, PFIELD user_cons_columnS.COLUMN_NAME%TYPE, LEVEL IN INTEGER) 
      return TREG IS
         SELECT T.TABLE_NAME P, C.COLUMN_NAME CP, R.TABLE_NAME F, D.COLUMN_NAME CF, LEVEL LEV
         from user_constraints T,user_constraints R, user_cons_columns C, user_cons_columns D
         WHERE T.constraint_name = R.r_constraint_name  
           AND T.constraint_type = 'P'
           AND R.constraint_type = 'R'
           AND T.constraint_name = C.constraint_name
           AND R.constraint_name = D.constraint_name  
           AND C.position = D.position
           AND T.TABLE_NAME = PTABLE
           AND C.column_name = PFIELD;
   BEGIN      
      for X in RELATION(TABLER,FIELD,LEVEL) loop
          REL.EXTEND;
          REL(REL.LAST) := X;
          CALC_children(X.F, X.CF,LEVEL+1,REL);
      end loop;  
   END;

   -- GET COLLECTION CHILDREN FROM A TABLE
   FUNCTION GET_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0) RETURN TRELATION IS
      REL TRELATION := TRELATION();
   BEGIN
      CALC_CHILDREN(UPPER(TABLER),UPPER(FIELD),LEVEL,REL);
      RETURN REL;
   END;
   
   -- GET REPORT FROM CHILDREN
   PROCEDURE LIST_CHILDREN(TABLER IN VARCHAR2, FIELD IN VARCHAR2, LEVEL IN INTEGER := 0) IS   
      REL TRELATION ;
   BEGIN
      REL := GET_CHILDREN(TABLER,FIELD,LEVEL);
      FOR I IN REL.FIRST..REL.LAST LOOP
         DBMS_OUTPUT.Put_Line(LPAD('>',REL(I).LEV+2,'-')|| REL(I).P||' EH PAI DE '||REL(I).F);  
      END LOOP;
   END;   
   
END;
 
/
